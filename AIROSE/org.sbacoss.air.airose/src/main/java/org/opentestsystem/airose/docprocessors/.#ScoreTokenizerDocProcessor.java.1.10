package org.air.essayscorer.docprocessors;

import java.io.IOException;
import java.io.StringReader;
import java.util.HashMap;

import org.air.essayscorer.common.abstractdocument.AbstractDocProcessors;
import org.air.essayscorer.common.abstractdocument.AbstractDocument;
import org.air.essayscorer.common.abstractdocument.AbstractResource;
import org.air.essayscorer.common.abstractdocument.DocProcessorException;

import au.com.bytecode.opencsv.CSVReader;
import au.com.bytecode.opencsv.CSVWriter;

/*
 * 
 * 
 * This processor separates a line of response into a score and the response.
 * They should be separated by a comma. The format is not CSV format. 
 * So, for example it will look as follows:
 * 
 * ...
 * ...
 * ...
 * 8, This is the response...
 * 7,This is the second response...
 * ...
 * ...
 * ...
 */
public class ScoreTokenizerDocProcessor extends AbstractDocProcessors {
	public ScoreTokenizerDocProcessor(AbstractDocument doc) {
		super(doc);
	}

	/*
	 * // For kaggle data - training set. public boolean
	 * processDocument(HashMap<String, AbstractResource> resourceMap) throws
	 * DocProcessorException { try { AbstractDocument doc = getDocument();
	 * String line = doc.getOriginalResponse(); if (line != null) { line =
	 * line.trim(); StringReader stringReader = new StringReader(line);
	 * CSVReader reader = new CSVReader(stringReader);
	 * 
	 * String[] columns = reader.readNext(); // Format 1: // the columns are: //
	 * "BookId","Grade","Form","Docid","Imagingid","Item", //
	 * "Datapoint","Score1","Score2","OutputFilename","Response"
	 * doc.addColumnData("BookId", doc.getFileName());
	 * doc.addColumnData("Grade", "N/A"); doc.addColumnData("Form", "N/A");
	 * doc.addColumnData("Docid", columns[0]); doc.addColumnData("Imaginid",
	 * "N/A"); doc.addColumnData("Item", "N/A"); doc.addColumnData("Datapoint",
	 * "N/A"); doc.addColumnData("Score1", columns[1]);
	 * doc.addColumnData("Score2", columns[2]); doc.addColumnData("FinalScore",
	 * columns[3]); doc.addColumnData("OutputFilename", "N/A");
	 * doc.addColumnData("Response", columns[4]);
	 * 
	 * // lets set this in the document.
	 * doc.setScore(Double.parseDouble(doc.getColumnValue("FinalScore")
	 * .toString())); doc.setOriginalResponse(doc.getColumnValue("Response")
	 * .toString()); doc.setModifiedResponse(doc.getOriginalResponse());
	 * 
	 * doc.setDocId(doc.getColumnValue("Docid").toString()); } } catch
	 * (IOException exp) { throw new DocProcessorException(exp.toString()); }
	 * return true; }
	 */
    /*
	// For SBAC data
	public boolean processDocument(HashMap<String, AbstractResource> resourceMap)
			throws DocProcessorException {
		try {
			AbstractDocument doc = getDocument();
			String line = doc.getOriginalResponse();
			if (line != null) {
				line = line.trim();
				StringReader stringReader = new StringReader(line);
				CSVReader reader = new CSVReader(stringReader);

				String[] columns = reader.readNext();
				// Format 1: //the columns are:
				// "BookId","Grade","Form","Docid","Imagingid","Item",
				// "Datapoint","Score1","Score2","OutputFilename","Response"
				doc.addColumnData("BookId", columns[0]);
				doc.addColumnData("Grade", columns[1]);
				doc.addColumnData("Form", columns[2]);
				doc.addColumnData("Docid", columns[3]);
				doc.addColumnData("Imaginid", columns[4]);
				doc.addColumnData("Item", columns[5]);
				doc.addColumnData("Datapoint", columns[6]);
				doc.addColumnData("Score1", columns[7]);
				doc.addColumnData("Score2", columns[8]);
				doc.addColumnData("OutputFilename", columns[9]);
				doc.addColumnData("Response", columns[10]);
				//
				// //Format 2: the columns
				// are: "BookId","Grade","Form","Docid","Imagingid","Item", //
				// "Datapoint","Score1","Score2","OutputFilename","Response"
				//
				--doc.addColumnData("BookId", "N/A");
				--doc.addColumnData("Grade", "N/A");
				--doc.addColumnData("Form", "N/A");
				--doc.addColumnData("Docid", columns[3]);
				--doc.addColumnData("Imaginid", columns[4]);
				--doc.addColumnData("Item", "N/A");
				--doc.addColumnData("Datapoint", "N/A");
				--doc.addColumnData("Score1", columns[0]);
				--doc.addColumnData("Score2", "-1");
				--doc.addColumnData("OutputFilename", "N/A");
				--doc.addColumnData("Response", columns[1]);
				
				double score1 = Double.parseDouble(doc.getColumnValue("Score1")
						.toString());
				double score2 = Double.parseDouble(doc.getColumnValue("Score2")
						.toString());
				doc.setScore(score1);

				doc.setOriginalResponse(doc.getColumnValue("Response")
						.toString());
				doc.setModifiedResponse(doc.getOriginalResponse());

				doc.setDocId(doc.getColumnValue("Docid").toString());
			}
		} catch (IOException exp) {
			throw new DocProcessorException(exp.toString());
		}
		return true;
	}
	*/
	public boolean processDocument(HashMap<String, AbstractResource> resourceMap)
			throws DocProcessorException {
		try {
			AbstractDocument doc = getDocument();
			String line = doc.getOriginalResponse();
			if (line != null) {
				line = line.trim();
				StringReader stringReader = new StringReader(line);
				CSVReader reader = new CSVReader(stringReader);

				String[] columns = reader.readNext();
				// Format 1: //the columns are:
				// "BookId","Grade","Form","Docid","Imagingid","Item",
				// "Datapoint","Score1","Score2","OutputFilename","Response"
				doc.addColumnData("vndr_test_event_id", columns[0]);
				doc.addColumnData("BookId", "N/A");
				doc.addColumnData("Grade", columns[1]);
				doc.addColumnData("Form", "N/A");
				doc.addColumnData("Date of Birth", columns[2]);
				doc.addColumnData("Item Max Points", columns[3]);
				doc.addColumnData("Item", columns[4]);
				doc.addColumnData("Format", columns[5]);
				doc.addColumnData("Scoring Status", columns[6]);				
				doc.addColumnData("Docid", columns[0]);
				doc.addColumnData("Imaginid", columns[0]);
				doc.addColumnData("Datapoint", "");
				
				doc.addColumnData("Score1", columns[7]);
				doc.addColumnData("Score2", columns[8]);
				
				
				doc.addColumnData("Initial Score", columns[7]);
				doc.addColumnData("Reliability Score", columns[8]);
				doc.addColumnData("Resolution Score", columns[9]);

				doc.addColumnData("initl_and_relbt_are_equal", columns[10], true);
				doc.addColumnData("initl_and_resltn_are_equal Score", columns[11], true);
				doc.addColumnData("relblt_and_resltn_are_equal", columns[12], true);
				
				doc.addColumnData("OutputFilename", columns[0]);				
				String response = columns[13];
				
				double score1 = Double.parseDouble(doc.getColumnValue("Initial Score")
						.toString());
			
				doc.setScore(score1);

				doc.setOriginalResponse(response);
				doc.setModifiedResponse(doc.getOriginalResponse());

				doc.setDocId(doc.getColumnValue("Docid").toString());
			}
		} catch (IOException exp) {
			throw new DocProcessorException(exp.toString());
		}
		return true;
	}
	/*
	public boolean processDocument(HashMap<String, AbstractResource> resourceMap)
			throws DocProcessorException {
		try {
			AbstractDocument doc = getDocument();
			String line = doc.getOriginalResponse();
			if (line != null) {
				line = line.trim();
				StringReader stringReader = new StringReader(line);
				CSVReader reader = new CSVReader(stringReader);

				String[] columns = reader.readNext();
				// Format 1: //the columns are:
				// "BookId","Grade","Form","Docid","Imagingid","Item",
				// "Datapoint","Score1","Score2","OutputFilename","Response"
				doc.addColumnData("BookId", columns[0]);
				doc.addColumnData("Grade", columns[1]);
				doc.addColumnData("Form", columns[2]);
				doc.addColumnData("Docid", columns[3]);
				doc.addColumnData("Imaginid", columns[4]);
				doc.addColumnData("Item", columns[5]);
				doc.addColumnData("Datapoint", columns[6]);
				doc.addColumnData("Score1", columns[7]);
				doc.addColumnData("Score2", columns[8]);
				doc.addColumnData("OutputFilename", columns[9]);
				doc.addColumnData("Response", columns[10]);
				//
				// //Format 2: the columns
				// are: "BookId","Grade","Form","Docid","Imagingid","Item", //
				// "Datapoint","Score1","Score2","OutputFilename","Response"
				//
				--doc.addColumnData("BookId", "N/A");
				--doc.addColumnData("Grade", "N/A");
				--doc.addColumnData("Form", "N/A");
				--doc.addColumnData("Docid", columns[3]);
				--doc.addColumnData("Imaginid", columns[4]);
				--doc.addColumnData("Item", "N/A");
				--doc.addColumnData("Datapoint", "N/A");
				--doc.addColumnData("Score1", columns[0]);
				--doc.addColumnData("Score2", "-1");
				--doc.addColumnData("OutputFilename", "N/A");
				--doc.addColumnData("Response", columns[1]);
				
				double score1 = Double.parseDouble(doc.getColumnValue("Score1")
						.toString());
				double score2 = Double.parseDouble(doc.getColumnValue("Score2")
						.toString());
				doc.setScore(score1);

				doc.setOriginalResponse(doc.getColumnValue("Response")
						.toString());
				doc.setModifiedResponse(doc.getOriginalResponse());

				doc.setDocId(doc.getColumnValue("Docid").toString());
			}
		} catch (IOException exp) {
			throw new DocProcessorException(exp.toString());
		}
		return true;
	}
	*/
}
