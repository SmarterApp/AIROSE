/*******************************************************************************
 * Copyright (c) 2013 American Institutes for Research
 * 
 * This file is part of AIROSE.
 * 
 * AIROSE is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 * 
 * AIROSE is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with AIROSE.  If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/
package org.opentestsystem.airose.termweights;

import org.opentestsystem.airose.common.abstractdocument.AbstractDocument;
import org.opentestsystem.airose.common.abstractdocument.AbstractTermWeightsProcessor;
import org.opentestsystem.airose.common.abstractdocument.AbstractToken;
import org.opentestsystem.airose.common.abstractdocument.TermWeightAssignmentException;

import java.util.Map;
import java.util.HashMap;

/*
 * Assigns term weights based simply on frequency.
 */
public class TermFrequencyWeightsAssignment extends AbstractTermWeightsProcessor
{

  public TermFrequencyWeightsAssignment (AbstractDocument doc) {
    super (doc);
  }

  /*
   * (non-Javadoc)
   * 
   * @see
   * org.air.essayscorer.common.abstractdocument.AbstractTermWeightsProcessor
   * #assignTermWeights()
   * 
   * Assign term weights based simply on frequency.
   * 
   * @return nothing
   */
  public void assignTermWeights () throws TermWeightAssignmentException {
    AbstractDocument document = getDocument ();
    Map<String, AbstractToken> termCounts = new HashMap<String, AbstractToken> (1000);

    /*
     * first iterate of the existing tokens and collect frequency information.
     */
    for (AbstractToken token : document.getListOfTokens ()) {
      String phrase = token.getToken ();
      AbstractToken newCountToken = termCounts.get (phrase);
      if (newCountToken == null) {
        newCountToken = token.clone ();
        newCountToken.setWeight (0);
        termCounts.put (phrase, newCountToken);
      }
      // update the term count
      newCountToken.setWeight (newCountToken.getWeight () + 1);
    }

    // now clear out all the tokens in the document and set new tokens.
    document.getListOfTokens ().clear ();
    if (termCounts.size () > 0)
      document.getListOfTokens ().addAll (termCounts.values ());
  }
}
