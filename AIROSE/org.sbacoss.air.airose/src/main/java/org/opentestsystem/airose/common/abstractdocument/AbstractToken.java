/*******************************************************************************
 * Copyright (c) 2013 American Institutes for Research
 * 
 * This file is part of AIROSE.
 * 
 * AIROSE is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 * 
 * AIROSE is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with AIROSE.  If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/
package org.opentestsystem.airose.common.abstractdocument;

import java.util.List;
import java.util.ArrayList;

public abstract class AbstractToken
{
  // the string which represents this token.
  protected String                       mToken                 = null;
  // a weight - this may be calculated differently.
  protected double                       mWeight                = 0;
  // this token may need to be resolved into alternate forms - e.g. hypernyms,
  // synonyms, meronyms, antonyms, pertainyms.
  protected List<AbstractAlternateToken> mListOfAlternateTokens = new ArrayList<AbstractAlternateToken> ();
  // the owner document.
  protected AbstractDocument             mDocument              = null;
  // the POS
  protected EnumPOS                      mPOS                   = EnumPOS.NOT_AVAILABLE;

  public AbstractDocument getOwnerDocument () {
    return this.mDocument;
  }

  public void setPOS (EnumPOS pos) {
    mPOS = pos;
  }

  public EnumPOS getPOS () {
    return mPOS;
  }

  public String getToken () {
    return mToken;
  }

  public void setToken (String token) {
    mToken = token;
  }

  public double getWeight () {
    return mWeight;
  }

  public void setWeight (double weight) {
    mWeight = weight;
  }

  public List<AbstractAlternateToken> getListOfAlternateTokens () {
    return mListOfAlternateTokens;
  }

  /*
   * (non-Javadoc)
   * 
   * @see java.lang.Object#clone()
   * 
   * this method does not do a deep clopy of mListOfAlternateTokens.
   */
  public AbstractToken clone () {
    AbstractToken newToken = createClone ();
    newToken.setPOS (this.getPOS ());
    newToken.setToken (this.getToken ());
    newToken.setWeight (this.getWeight ());
    /*
     * now clone mListOfAlternateTokens list.
     */
    List<AbstractAlternateToken> listOfTokens = this.getListOfAlternateTokens ();
    List<AbstractAlternateToken> listOfNewTokens = newToken.getListOfAlternateTokens ();
    listOfNewTokens.clear ();
    if (listOfTokens != null && listOfTokens.size () > 0)
      listOfNewTokens.addAll (listOfTokens);
    return newToken;
  }

  protected AbstractToken (AbstractDocument doc) {
    mDocument = doc;
  }

  /*
   * createClone should clone any other member variables that have been declared
   * in subclasses.
   */
  protected abstract AbstractToken createClone ();

}
