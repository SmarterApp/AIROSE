/*******************************************************************************
 * Copyright (c) 2013 American Institutes for Research
 * 
 * This file is part of AIROSE.
 * 
 * AIROSE is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 * 
 * AIROSE is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with AIROSE.  If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/
package org.opentestsystem.airose.wordnet;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.List;

import org.apache.log4j.Logger;
import org.opentestsystem.airose.common.abstractdocument.EnumPOS;
import org.opentestsystem.airose.common.config.ConfigurationFactory;
import org.opentestsystem.airose.common.config.UninitializedException;
import org.opentestsystem.airose.utilities.LoggerUtil;

import edu.mit.jwi.IDictionary;
import edu.mit.jwi.RAMDictionary;
import edu.mit.jwi.data.ILoadPolicy;
import edu.mit.jwi.item.POS;
import edu.mit.jwi.morph.WordnetStemmer;

public class EssayScorerWordNetJAWS
{
  protected static Logger               LOG                 = Logger.getLogger (EssayScorerWordNetJAWS.class.getName ());

  private WordnetStemmer                mStemmingDictionary = null;
  private IDictionary                   mDictionary         = null;

  private static EssayScorerWordNetJAWS singleton           = null;

  /*
   * Gets an instance of WordNet. Needs either a TrainerConfiguration or a
   * ScorerConfiguration to have been initialized first.
   */
  public static EssayScorerWordNetJAWS getInstace () {
    if (singleton != null)
      return singleton;

    init ();

    return singleton;
  }

  public List<String> getBaseWords (String word, EnumPOS pos) {
    List<String> stems = null;

    try {
      if (pos != null)
        stems = mStemmingDictionary.findStems (word, POS.valueOf (pos.getType ()));
    } catch (Exception exp) {
      // todo: we had a problem resolving the type to a POS type.
    }
    return stems;
  }

  private static synchronized void init () {
    if (singleton != null)
      return;
    try {
      singleton = new EssayScorerWordNetJAWS ();
    } catch (UninitializedException exp) {
      LoggerUtil.severe (LOG, exp.getMessage ());
    } catch (MalformedURLException mExp) {
      LoggerUtil.severe (LOG, mExp.getMessage ());
    } catch (IOException ioExp) {
      LoggerUtil.severe (LOG, ioExp.getMessage ());
    } catch (InterruptedException intExp) {
      LoggerUtil.severe (LOG, intExp.getMessage ());
    }
  }

  private EssayScorerWordNetJAWS () throws UninitializedException, MalformedURLException, IOException, InterruptedException {
    URL dictionaryURL = new URL ("file", null, ConfigurationFactory.getConfiguration ().getWordNetDataPath ());
    mDictionary = new RAMDictionary (dictionaryURL, ILoadPolicy.NO_LOAD);
    mDictionary.open ();
    mStemmingDictionary = new WordnetStemmer (mDictionary);
  }

}
