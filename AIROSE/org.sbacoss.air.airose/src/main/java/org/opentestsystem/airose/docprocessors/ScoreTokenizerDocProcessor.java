/*******************************************************************************
 * Copyright (c) 2013 American Institutes for Research
 * 
 * This file is part of AIROSE.
 * 
 * AIROSE is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 * 
 * AIROSE is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with AIROSE.  If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/
package org.opentestsystem.airose.docprocessors;

import java.io.IOException;
import java.io.StringReader;
import java.util.HashMap;

import org.opentestsystem.airose.common.abstractdocument.AbstractDocProcessors;
import org.opentestsystem.airose.common.abstractdocument.AbstractDocument;
import org.opentestsystem.airose.common.abstractdocument.AbstractResource;
import org.opentestsystem.airose.common.abstractdocument.DocProcessorException;

import au.com.bytecode.opencsv.CSVReader;

/*
 * 
 * 
 * This processor separates a line of response into a score and the response.
 * They should be separated by a comma. The format is not CSV format. So, for
 * example it will look as follows:
 * 
 * ... ... ... 8, This is the response... 7,This is the second response... ...
 * ... ...
 */
public class ScoreTokenizerDocProcessor extends AbstractDocProcessors
{
  public ScoreTokenizerDocProcessor (AbstractDocument doc) {
    super (doc);
  }

  public boolean processDocument (HashMap<String, AbstractResource> resourceMap) throws DocProcessorException {
    try {
      AbstractDocument doc = getDocument ();
      String line = doc.getOriginalResponse ();
      if (line != null) {
        line = line.trim ();
        StringReader stringReader = new StringReader (line);
        CSVReader reader = new CSVReader (stringReader);

        String[] columns = reader.readNext ();
        // Format for kaggle data.
        // "EssayId","Rater1 Score","Rater2 Score","Domain score", "Response"
        doc.addColumnData ("essay_id", columns[0]);
        doc.addColumnData ("BookId", "N/A");
        doc.addColumnData ("Grade", "N/A");
        doc.addColumnData ("Form", "N/A");
        doc.addColumnData ("Date of Birth", "N/A");
        doc.addColumnData ("Item Max Points", "N/A");
        doc.addColumnData ("Item", "N/A");
        doc.addColumnData ("Format", "N/A");
        doc.addColumnData ("Scoring Status", "N/A");
        doc.addColumnData ("Docid", columns[0]);
        doc.addColumnData ("Imaginid", "N/A");
        doc.addColumnData ("Datapoint", "N/A");

        doc.addColumnData ("Score1", columns[1]);
        doc.addColumnData ("Score2", columns[2]);
        doc.addColumnData ("Domain Score", columns[3]);

        doc.addColumnData ("OutputFilename", columns[0]);
        String response = columns[4];

        double score1 = Double.parseDouble (doc.getColumnValue ("Domain Score").toString ());

        doc.setScore (score1);

        doc.setOriginalResponse (response);
        doc.setModifiedResponse (doc.getOriginalResponse ());

        doc.setDocId (doc.getColumnValue ("Docid").toString ());
      }
    } catch (IOException exp) {
      throw new DocProcessorException (exp.toString ());
    }
    return true;
  }
}
