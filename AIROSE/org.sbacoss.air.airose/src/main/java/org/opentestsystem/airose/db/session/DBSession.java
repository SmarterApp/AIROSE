/*******************************************************************************
 * Copyright (c) 2013 American Institutes for Research
 * 
 * This file is part of AIROSE.
 * 
 * AIROSE is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 * 
 * AIROSE is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with AIROSE.  If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/
package org.opentestsystem.airose.db.session;

import java.util.logging.Logger;

import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.Transaction;

/*
 * abstraction of the hibernate session class. a DBSession object may be created
 * only once by making a call to DBSessionFactory.getSession(). More than one
 * transaction may be created in a DBSession - one-at-a-time of course, - by
 * making calls to beginTransaction() and commitTransaction().
 */
public class DBSession
{
  private static final Logger LOGGER                      = Logger.getLogger (DBSession.class.getName ());

  private Transaction         mTransaction                = null;
  private Session             mSession                    = null;
  private int                 mSessionCreatorHashcode     = -1;
  private int                 mTransactionCreatorHashcode = -1;

  protected DBSession (int creatorHashcode, Session session) {
    mSession = session;
    mSessionCreatorHashcode = creatorHashcode;
  }

  /*
   * returns true if a valid session is open.
   */
  public boolean isSessionOpen () {
    if (mSession != null && mSession.isOpen ())
      return true;
    return false;
  }

  /*
   * save an object.
   */
  public Object saveOrUpdateObject (Object o) throws SessionException {
    if (!isTransactionOpen ())
      throw new SessionException ("An object save / update was attempted on a non-existent session/transaction.");
    mSession.saveOrUpdate (o);
    return o;
  }

  /*
   * creates a hibernate query object.
   */
  public Query createQuery (String query) throws SessionException {
    if (!isSessionOpen ())
      throw new SessionException ("A query creation was attempted on an unavailable session.");
    return mSession.createQuery (query);
  }

  /*
   * closes the thread specific hibernate session. if no such session exists
   * then it will throw an exception.
   */
  public void closeSession (int objectHashcode) throws SessionException {
    if (mSession == null)
      throw new java.lang.IllegalAccessError ("Session close attempted while no session data exists.");
    if (mTransaction != null) {
      throw new SessionException ("Session close was attempted while uncommited transactions exist.");
    }

    if (objectHashcode == mSessionCreatorHashcode) {
      mSession.close ();
      mSession = null;
      mSessionCreatorHashcode = -1;
    } else {
      throw new SessionException ("Session close attempted by an object other than the creator.");
    }
  }

  /*
   * begins a transaction in the currently open thread specific session.
   */
  public void beginTransaction (int creatorHashcode) throws SessionException {
    if (mTransaction == null) {
      mTransaction = mSession.beginTransaction ();
      mTransactionCreatorHashcode = creatorHashcode;
    }
    /*
     * else { throw new SessionException(
     * "A new transaction creation was attempted while an existing one is still option."
     * ); }
     */
  }

  /*
   * commits any open transaction in the thread specific session.
   */
  public void commitTransaction (int commiterHashcode) throws SessionException {
    if (mTransaction == null
    /* || commiterHashcode != mTransactionCreatorHashcode */)
      throw new SessionException ("Transaction commit attempted while no transaction exists.");
    if (mTransactionCreatorHashcode == commiterHashcode) {
      mTransaction.commit ();
      mTransaction = null;
      mTransactionCreatorHashcode = -1;
    }
  }

  protected boolean isTransactionOpen () {
    if (isSessionOpen () && mTransaction != null)
      return true;
    else
      return false;
  }
}
