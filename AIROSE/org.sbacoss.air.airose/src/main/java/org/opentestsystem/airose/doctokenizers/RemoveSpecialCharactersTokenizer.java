/*******************************************************************************
 * Copyright (c) 2013 American Institutes for Research
 * 
 * This file is part of AIROSE.
 * 
 * AIROSE is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 * 
 * AIROSE is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with AIROSE.  If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/
package org.opentestsystem.airose.doctokenizers;

import org.opentestsystem.airose.common.abstractdocument.AbstractDocTokenizers;
import org.opentestsystem.airose.common.abstractdocument.AbstractDocument;
import org.opentestsystem.airose.common.abstractdocument.AbstractToken;
import org.opentestsystem.airose.common.abstractdocument.DocTokenizationException;

import java.util.List;

/*
 * this class removes tokens that have special characters or that are just
 * special characters.
 */
public class RemoveSpecialCharactersTokenizer extends AbstractDocTokenizers
{
  public RemoveSpecialCharactersTokenizer (AbstractDocument doc) {
    super (doc);
  }

  /*
   * (non-Javadoc)
   * 
   * @see org.air.essayscorer.common.abstractdocument.AbstractDocTokenizers#
   * tokenizeDocument()
   */
  public boolean tokenizeDocument () throws DocTokenizationException {
    AbstractDocument document = getDocument ();
    List<AbstractToken> listOfTokens = document.getListOfTokens ();
    for (int counter1 = 0; counter1 < listOfTokens.size (); ++counter1) {
      AbstractToken token = listOfTokens.get (counter1);
      String text = token.getToken ();
      if (!shouldAddThisWord (text)) {
        listOfTokens.remove (counter1);
        --counter1;
        continue;
      }
    }
    document.setWordCount (listOfTokens.size ());
    return true;
  }

  // todo: make this more efficient.
  /*
   * for (each character in word) if (")(@...".indexOf(character)) return false;
   */
  public static boolean shouldAddThisWord (String word) {
    if (word.contains (")"))
      return false;
    if (word.contains ("("))
      return false;
    if (word.contains ("+"))
      return false;
    if (word.contains ("@"))
      return false;
    if (word.contains ("#"))
      return false;
    if (word.contains ("\""))
      return false;
    if (word.contains ("\'"))
      return false;
    if (word.contains ("\\"))
      return false;
    if (word.contains ("/"))
      return false;
    if (word.contains ("$"))
      return false;
    if (word.contains ("!"))
      return false;
    if (word.contains ("&"))
      return false;
    if (word.contains ("="))
      return false;
    if (word.contains (";"))
      return false;
    if (word.contains (","))
      return false;
    if (word.contains ("."))
      return false;
    if (word.contains (":"))
      return false;
    if (word.contains ("?"))
      return false;
    if (word.contains ("-"))
      return false;
    if (word.contains ("*"))
      return false;
    if (word.contains ("_"))
      return false;
    if (word.contains ("]"))
      return false;
    if (word.contains ("["))
      return false;
    if (word.contains ("1") || word.contains ("2") || word.contains ("3") || word.contains ("4") || word.contains ("5") || word.contains ("6") || word.contains ("7") || word.contains ("8")
        || word.contains ("9") || word.contains ("0"))
      return false;
    return true;
  }
}
