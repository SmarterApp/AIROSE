/*******************************************************************************
 * Copyright (c) 2013 American Institutes for Research
 * 
 * This file is part of AIROSE.
 * 
 * AIROSE is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 * 
 * AIROSE is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with AIROSE.  If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/
package org.opentestsystem.airose.docquality.processors;

import org.opentestsystem.airose.db.entities.DocumentQuality;
import org.opentestsystem.airose.docquality.EnumDocumentQualityAttributes;

public class DocumentQualityProcessorFactory
{
  public static AbstractDocumentQualityProcessor createDocumentQualityProcessor (DocumentQuality docQuality) {
    EnumDocumentQualityAttributes value = EnumDocumentQualityAttributes.valueOf (docQuality.getTerm ());
    switch (value) {
    case MISSPELLINGS:
      return new MisspellingProcessor (docQuality);
    case UNIQUE_WORD_NUMBERS:
      return new UniqueWordCountProcessor (docQuality);
    case PARAGRAPHS:
      return null;
    case VERB_QUALITY:
      return null;
    case GRAMMAR:
      return new GrammarMistakeProcessor (docQuality);
    case RATIO_OF_UNIQUE_WORDS_TO_TOTAL_WORDS:
      return new RatioOfUniqueWordsProcessor (docQuality);
    /*case PARAGRAPH_COUNT:
      return new ParagraphCountQualityProcessor (docQuality);
    case RAW_WORD_COUNT:
      // return new RawWordCountQualityProcessor (docQuality);
      return null;
    case PERCENTAGE_MISSPELLINGS:
      // return new PercentageMisspellingsQualityProcessor(docQuality);
      return null;
    case AVERAGE_WORD_LENGTH:
      // return new AverageWordLengthQualityProcessor (docQuality);
      return null;
    case AVERAGE_PARAGRAPH_LENGTH:
      return new AverageParagraphLengthQualityProcessor (docQuality);
    case PASSIVE_SENTENCES_PROPORTION:
      return new PassiveSentencesQualityProcessor (docQuality);
    case OVERALL_PUNCTUATION_SCORE:
      return new OverallPunctuationQualityProcessor (docQuality);
    case OVERALL_SYNTAX_SCORE:
      return new OverallSyntaxScoreQualityProcessor (docQuality);
    case AVERAGE_MINIMUM_SYNTAX_SCORE:
      return new AverageSyntaxQualityProcessor (docQuality);
    case NUMBER_OF_NOMINALS:
      return new NumberOfNominalsQualityProcessor (docQuality);
    case NUMBER_OF_LONG_NOMINALS:
      return new NumberOfLongNominalsQualityProcessor (docQuality);
    case VERB_DIVERSITY:
      // return new VerbDiversityQualityProcessor(docQuality);
      return null;
    case SENTENCE_COUNT:
      return new SentenceCountQualityProcessor (docQuality);
      */
    default:
      return null;
    }
  }
}
