/*******************************************************************************
 * Copyright (c) 2013 American Institutes for Research
 * 
 * This file is part of AIROSE.
 * 
 * AIROSE is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 * 
 * AIROSE is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with AIROSE.  If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/
/**
 * 
 */
package org.opentestsystem.airose.persisters;

import java.io.FileNotFoundException;
import java.util.List;

import org.opentestsystem.airose.common.config.UninitializedException;
import org.opentestsystem.airose.db.accessors.DocumentQualityAccessor;
import org.opentestsystem.airose.db.accessors.MatrixAccessor;
import org.opentestsystem.airose.db.accessors.ModelAccessor;
import org.opentestsystem.airose.db.accessors.ModelEntryAccessor;
import org.opentestsystem.airose.db.accessors.PreviouslySeenWordsAccessor;
import org.opentestsystem.airose.db.accessors.ReadOnlyModeException;
import org.opentestsystem.airose.db.accessors.TermAccessor;
import org.opentestsystem.airose.db.accessors.UniqueResultException;
import org.opentestsystem.airose.db.entities.MatrixLoadException;
import org.opentestsystem.airose.db.entities.MatrixType;
import org.opentestsystem.airose.db.entities.Model;
import org.opentestsystem.airose.db.entities.TermIndex;
import org.opentestsystem.airose.db.session.DBSession;
import org.opentestsystem.airose.db.session.DBSessionFactory;
import org.opentestsystem.airose.db.session.SessionException;
import org.opentestsystem.airose.docquality.DocumentQualityLoader;
import org.opentestsystem.airose.docquality.processors.DocumentQualityProcessorNotImplementedException;
import org.opentestsystem.airose.linear.Matrix;
import org.opentestsystem.airose.regression.AbstractModel;
import org.opentestsystem.airose.regression.ModelLoadingException;
import org.opentestsystem.airose.regression.RegressionAlgorithmFactory;
import org.opentestsystem.airose.resources.SpellCheckResource;
import org.opentestsystem.airose.sspace.TermDimensionMap;

/**
 * @author Shiva BEHERA [sbehera@air.org]
 * 
 */
public class DBModelPersister implements IModelPersister
{

  public ModelHolder retrieve (String modelId, String essayId, String scoreType) throws SessionException, UninitializedException, UniqueResultException, MatrixLoadException,
      DocumentQualityProcessorNotImplementedException, ReadOnlyModeException, ModelLoadingException {
    ModelHolder returnValue = new ModelHolder ();
    DBSession session = DBSessionFactory.getInstance ().getSession (this.hashCode ());
    ModelAccessor modelAccessor = new ModelAccessor (session);
    ModelEntryAccessor modelEntriesAccessor = new ModelEntryAccessor (session);
    TermAccessor termAccessor = new TermAccessor (session);
    MatrixAccessor matrixAccessor = new MatrixAccessor (session);

    Model md = modelAccessor.getModel (modelId, essayId, scoreType);
    if (md == null)
      throw new UninitializedException (String.format ("A model for  Model Id {0}, Essay Id {1} and Score Type {2} does not exist. Aborting!", modelId, essayId, scoreType));
    returnValue.setModel (md);

    /*
     * load the term-to-dimension map.
     */
    List<TermIndex> terms = termAccessor.getListOfTermsInModel (md);
    TermDimensionMap map = new TermDimensionMap (terms);
    map.setReadOnly (true);
    returnValue.setDimensionMapper (map);

    /*
     * load the matrices.
     */
    Matrix u = matrixAccessor.getMatrixEntries (md, MatrixType.Matrix_U);
    Matrix s = matrixAccessor.getMatrixEntries (md, MatrixType.Matrix_S);
    Matrix v = matrixAccessor.getMatrixEntries (md, MatrixType.Matrix_V);
    Matrix[] usv = new Matrix[] { u, s, v };
    returnValue.setUsvMatrices (usv);

    /*
     * load the document quality attributes.
     */
    DocumentQualityLoader docQualityAssessor = new DocumentQualityLoader ();
    docQualityAssessor.loadFromDB (session, md);
    returnValue.setDocumentQualityAttributes (docQualityAssessor);

    // expected betas are the number of dimensions used in the reduced
    // semantic space plus
    // the number of document attributed we have used for building this model
    // plus the one constant term.
    int totalRegressorsUsed = docQualityAssessor.getTotalNumberOfQualityAttributes () + md.getNumberOfDimensions ();

    /*
     * load the scoring model. todo:
     */
    AbstractModel scoringModel = RegressionAlgorithmFactory.loadModel (md, modelEntriesAccessor, totalRegressorsUsed);
    returnValue.setRegressionModel (scoringModel);

    // load the spell check resources as well.
    SpellCheckResource resource = new SpellCheckResource ();
    resource.initializeFromDB (new PreviouslySeenWordsAccessor (session), md);
    returnValue.setPreviouslySeenWordsAccessor (resource);

    session.closeSession (this.hashCode ());
    return returnValue;
  }

  public void persist (ModelHolder mh, String outputFolder) throws SessionException, FileNotFoundException, UninitializedException, ReadOnlyModeException {

    Model md = mh.getModel ();
    TermDimensionMap dimensionMapper = mh.getDimensionMapper ();
    Matrix[] usv = mh.getUsv ();
    DocumentQualityLoader qualityAttributesLoader = mh.getDocumentQualityAttributes ();
    AbstractModel outputModel = mh.getRegressionModel ();
    SpellCheckResource resource = mh.getPreviouslySeenWordAccessor ();

    DBSession session = DBSessionFactory.getInstance ().getSession (this.hashCode ());
    ModelAccessor modelAccessor = new ModelAccessor (session);
    TermAccessor termAccessor = new TermAccessor (session);
    MatrixAccessor matrixAccessor = new MatrixAccessor (session);

    // first save the model.
    md = modelAccessor.insertNewModel (md);
    // save the term index.
    termAccessor.saveTermIndex (dimensionMapper, md);
    // save the three matrices.
    matrixAccessor.saveMatrix (usv[0], MatrixType.Matrix_U, md);
    matrixAccessor.saveMatrix (usv[1], MatrixType.Matrix_S, md);
    matrixAccessor.saveMatrix (usv[2], MatrixType.Matrix_V, md);
    // save the document quality attributes.
    DocumentQualityAccessor docQualityAccessor = new DocumentQualityAccessor (session);
    qualityAttributesLoader.saveToDB (docQualityAccessor, md);
    qualityAttributesLoader.saveToFolder ();
    // save the resources.
    // first: spell check resource.
    PreviouslySeenWordsAccessor previouslySeenWordAccessor = new PreviouslySeenWordsAccessor (session);
    resource.saveToDB (previouslySeenWordAccessor, md);

    ModelEntryAccessor modelEntryAccessor = new ModelEntryAccessor (session);

    outputModel.saveToDatabase (modelEntryAccessor, matrixAccessor, md, outputFolder);
    session.closeSession (this.hashCode ());
  }
}
