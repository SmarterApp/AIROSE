/*******************************************************************************
 * Copyright (c) 2013 American Institutes for Research
 * 
 * This file is part of AIROSE.
 * 
 * AIROSE is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 * 
 * AIROSE is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with AIROSE.  If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/
package org.opentestsystem.airose.languagetool;

import java.util.ArrayList;
import java.util.List;
import java.util.Hashtable;

public class Mistakes
{

  private List<Mistake>                    mListOfMistakes = null;
  private Hashtable<String, List<Mistake>> mMistakesMap    = new Hashtable<String, List<Mistake>> ();

  public Mistakes (List<Mistake> mistakes) {
    this.mListOfMistakes = mistakes;
    if (mistakes != null) {
      for (Mistake mistake : mistakes) {
        // add only spelling mistakes for the time being.
        // todo: what about other kinds of mistakes.
        // if this changes here we would need to fix SpellCheckPreprocessor as
        // well.
        String key = mistake.getMistakeWord ().toLowerCase ();
        List<Mistake> allMistakesForThisContext = null;
        if (mMistakesMap.contains (key))
          allMistakesForThisContext = mMistakesMap.get (key);
        else {
          allMistakesForThisContext = new ArrayList<Mistake> ();
          mMistakesMap.put (key, allMistakesForThisContext);
        }
        allMistakesForThisContext.add (mistake);
      }
    }
  }

  public List<Mistake> getListOfMistakes () {
    return this.mListOfMistakes;
  }

  public String getFirstSuggestedReplacementForMistakeContext (String mistakeContext, RuleMatchTypeEnum mistakeType) {
    String key = mistakeContext.toLowerCase ();
    if (isContextInMistakesList (key)) {
      List<Mistake> mistakes = this.mMistakesMap.get (key);
      for (Mistake mistake : mistakes) {
        if (mistake.getMistakeType () == mistakeType)
          return mistake.getFirstSuggestedReplacement ();
      }
      return null;
    } else
      return null;
  }

  public boolean isContextInMistakesList (String mistakeContext) {
    if (mMistakesMap.containsKey (mistakeContext.toLowerCase ()))
      return true;
    return false;
  }
}
