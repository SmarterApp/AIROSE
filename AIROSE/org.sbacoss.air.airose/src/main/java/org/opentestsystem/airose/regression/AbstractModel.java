/*******************************************************************************
 * Copyright (c) 2013 American Institutes for Research
 * 
 * This file is part of AIROSE.
 * 
 * AIROSE is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 * 
 * AIROSE is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with AIROSE.  If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/
package org.opentestsystem.airose.regression;

import java.io.FileNotFoundException;
import java.util.List;

import org.opentestsystem.airose.common.abstractdocument.AbstractDocument;
import org.opentestsystem.airose.db.accessors.MatrixAccessor;
import org.opentestsystem.airose.db.accessors.ModelEntryAccessor;
import org.opentestsystem.airose.db.entities.MatrixType;
import org.opentestsystem.airose.db.entities.Model;
import org.opentestsystem.airose.db.session.SessionException;
import org.opentestsystem.airose.linear.Matrices;
import org.opentestsystem.airose.linear.Matrix;
import org.opentestsystem.airose.linear.MatrixTypeEnum;

public abstract class AbstractModel
{

  private double[]   yVector = null;
  private double[][] xVector = null;

  public double[] getDependentVariableVector () {
    return this.yVector;
  }

  public double[][] getIndependentVariablesMatrix () {
    return this.xVector;
  }

  @SuppressWarnings (value = { "rawtypes" })
  public abstract List createEmptyDocumentStatsLists ();

  public void saveToDatabase (ModelEntryAccessor dbModelAccessor, MatrixAccessor dbMatrixAccessor, Model md, String outputFolder) throws SessionException, FileNotFoundException {
    // save the model.
    saveToDatabaseCustom (dbModelAccessor, dbMatrixAccessor, md, outputFolder);
    // now save the input data.
    saveRegressionMatrix (getDependentVariableVector (), getIndependentVariablesMatrix (), dbMatrixAccessor, md);
  }

  public abstract AbstractDocumentStats scoreResponse (Matrix docColumnMatrix, AbstractDocument ownerDoc);

  public abstract void loadFromDatabase (Model md, ModelEntryAccessor dbModelAccessor, int countOfExpectedBetas) throws SessionException, ModelLoadingException;

  protected AbstractModel () {

  }

  protected AbstractModel (double[] yVector, double[][] xVector) {
    this.yVector = yVector;
    this.xVector = xVector;
  }

  protected abstract void saveToDatabaseCustom (ModelEntryAccessor dbModelAccessor, MatrixAccessor dbMatrixAccessor, Model md, String outputFolder) throws SessionException, FileNotFoundException;

  protected void saveRegressionMatrix (double[] yVector, double[][] xVector, MatrixAccessor dbMatrixAccessor, Model md) throws SessionException {
    // lets save the regression input matrix.
    Matrix yMatrix = Matrices.create (yVector.length, 1, MatrixTypeEnum.REAL2D);
    for (int counter1 = 0; counter1 < yVector.length; ++counter1) {
      yMatrix.set (counter1, 0, yVector[counter1]);
    }
    dbMatrixAccessor.saveMatrix (yMatrix, MatrixType.Matrix_REGRESSION_Y, md);

    // lets save the x matrix.
    Matrix xMatrix = Matrices.create (xVector.length, xVector[0].length, MatrixTypeEnum.REAL2D);
    for (int counter1 = 0; counter1 < xVector.length; ++counter1) {
      for (int counter2 = 0; counter2 < xVector[0].length; ++counter2) {
        xMatrix.set (counter1, counter2, xVector[counter1][counter2]);
      }
    }
    dbMatrixAccessor.saveMatrix (xMatrix, MatrixType.Matrix_REGRESSION_X, md);
  }

}
