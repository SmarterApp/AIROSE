/*******************************************************************************
 * Copyright (c) 2013 American Institutes for Research
 * 
 * This file is part of AIROSE.
 * 
 * AIROSE is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 * 
 * AIROSE is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with AIROSE.  If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/
package org.opentestsystem.airose.doctokenizers;

import java.util.List;

import org.opentestsystem.airose.common.abstractdocument.AbstractDocTokenizers;
import org.opentestsystem.airose.common.abstractdocument.AbstractDocument;
import org.opentestsystem.airose.common.abstractdocument.AbstractToken;
import org.opentestsystem.airose.common.abstractdocument.DocTokenizationException;
import org.opentestsystem.airose.languagetool.Mistakes;
import org.opentestsystem.airose.languagetool.RuleMatchTypeEnum;
import org.opentestsystem.airose.wordnet.EssayScorerWordNetJAWS;

/*
 * Replaces the tokens with their wordnet base words.
 */
public class WordNetBaseWordsTokenizer extends AbstractDocTokenizers
{
  public WordNetBaseWordsTokenizer (AbstractDocument doc) {
    super (doc);
  }

  public boolean tokenizeDocument () throws DocTokenizationException {

    AbstractDocument doc = getDocument ();
    Mistakes mistakesInDoc = doc.getMistakes ();
    EssayScorerWordNetJAWS wordnet = EssayScorerWordNetJAWS.getInstace ();

    List<AbstractToken> tokens = doc.getListOfTokens ();
    for (int counter1 = 0; counter1 < tokens.size (); ++counter1) {
      AbstractToken token = tokens.get (counter1);
      String thisToken = token.getToken ().toLowerCase ();
      List<String> baseWords = wordnet.getBaseWords (thisToken, token.getPOS ());
      String replacementToken = null;
      if (baseWords == null || baseWords.size () == 0) {
        if (!"NOUN".equals (token.getPOS ().getType ())) {
          // not a noun phrase. did we have a problem with spelling on this one?
          String suggestedReplacement = mistakesInDoc.getFirstSuggestedReplacementForMistakeContext (thisToken, RuleMatchTypeEnum.SPELLING_MISTAKE);
          if (suggestedReplacement != null) {
            replacementToken = suggestedReplacement;
          }
        } else
          // if noun phrase: take as is.
          replacementToken = thisToken;
      } else {
        replacementToken = baseWords.get (0);
      }
      if (replacementToken == null) {
        // if we could not find a valid base word or a spelling suggestion
        // then bail on this token.
        tokens.remove (counter1);
        --counter1;
        continue;
      }
      token.setToken (replacementToken);
    }

    return true;
  }

}
