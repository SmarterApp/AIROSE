/*******************************************************************************
 * Copyright (c) 2013 American Institutes for Research
 * 
 * This file is part of AIROSE.
 * 
 * AIROSE is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 * 
 * AIROSE is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with AIROSE.  If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/
package org.opentestsystem.airose.regression.orderedprobit;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;

import org.opentestsystem.airose.common.abstractdocument.AbstractDocument;
import org.opentestsystem.airose.regression.AbstractDocumentStats;

public class OrderedProbitDocumentStats extends AbstractDocumentStats
{

  private static ArrayList<String> HEADER                   = new ArrayList<String> ();

  private int                      mTotalCategories         = 0;
  private ArrayList<Double>        mCategoryProbabilities   = new ArrayList<Double> ();
  private int                      mThisCategory            = -1;
  private double                   mThisCategoryProbability = 0;

  public OrderedProbitDocumentStats (AbstractDocument doc) {
    super (doc);
  }

  protected void setTotalCategories (int totalCategories) {
    this.mTotalCategories = totalCategories;
  }

  public int getTotalCategories () {
    return this.mTotalCategories;
  }

  protected void addToCategoryProbabilities (double categoryProbability) {
    mCategoryProbabilities.add (categoryProbability);
  }

  public Iterator<Double> getCategoryProbabilities () {
    return mCategoryProbabilities.iterator ();
  }

  protected void setThisCategoryProbability (double probability) {
    this.mThisCategoryProbability = probability;
  }

  public double getThisCategoryProbability () {
    return this.mThisCategoryProbability;
  }

  protected void setThisCategory (int category) {
    mThisCategory = category;
  }

  public int getThisCategory () {
    return mThisCategory;
  }

  public List<String> getDescriptiveHeader () {
    List<String> returnList = new ArrayList<String> ();
    returnList.addAll (HEADER);
    for (int counter1 = 0; counter1 < mCategoryProbabilities.size (); ++counter1) {
      returnList.add (PROBABILITIES + (counter1 + 1));
    }

    return returnList;
  }

  public Hashtable<String, String> getAdditionalDataPoints () {
    Hashtable<String, String> table = new Hashtable<String, String> ();
    table.put (THIS_CATEGORY, "" + mThisCategory);
    table.put (TOTAL_CATEGORIES, "" + mTotalCategories);
    table.put (THIS_CATEGORY_PROBABILITY, "" + mThisCategoryProbability);

    ArrayList<Double> copyOfProbabilities = new ArrayList<Double> ();
    for (int counter1 = 0; counter1 < mCategoryProbabilities.size (); ++counter1) {
      table.put (PROBABILITIES + (counter1 + 1), "" + mCategoryProbabilities.get (counter1));
      copyOfProbabilities.add (mCategoryProbabilities.get (counter1));
    }

    Collections.sort (copyOfProbabilities);
    // get the next highest probability.
    if (copyOfProbabilities.size () > 1) {
      table.put (RATIO_TO_NEXT_HIGHEST_PROBABILITY, "" + (mThisCategoryProbability / copyOfProbabilities.get (copyOfProbabilities.size () - 2)));
    } else
      table.put (RATIO_TO_NEXT_HIGHEST_PROBABILITY, "N/A");

    return table;
  }

  private static final String THIS_CATEGORY                     = "This Category";
  private static final String TOTAL_CATEGORIES                  = "Total Categories";
  private static final String PROBABILITIES                     = "Probability for Category ";
  private static final String THIS_CATEGORY_PROBABILITY         = "This Category Probability";
  private static final String RATIO_TO_NEXT_HIGHEST_PROBABILITY = "Ratio to next highest probability";
  static {
    HEADER.add (THIS_CATEGORY);
    HEADER.add (TOTAL_CATEGORIES);
    HEADER.add (THIS_CATEGORY_PROBABILITY);
    HEADER.add (RATIO_TO_NEXT_HIGHEST_PROBABILITY);
  }

}
