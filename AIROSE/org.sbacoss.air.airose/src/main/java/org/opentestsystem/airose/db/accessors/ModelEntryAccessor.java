/*******************************************************************************
 * Copyright (c) 2013 American Institutes for Research
 * 
 * This file is part of AIROSE.
 * 
 * AIROSE is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 * 
 * AIROSE is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with AIROSE.  If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/
package org.opentestsystem.airose.db.accessors;

import org.hibernate.Query;
import org.opentestsystem.airose.db.entities.Model;
import org.opentestsystem.airose.db.entities.ModelEntriesType;
import org.opentestsystem.airose.db.entities.ModelEntry;
import org.opentestsystem.airose.db.session.DBSession;
import org.opentestsystem.airose.db.session.SessionException;

import java.util.List;
import java.util.Iterator;

public class ModelEntryAccessor extends AbstractAccessor
{

  public ModelEntryAccessor (DBSession session) {
    super (session);
  }

  /*
   * todo: set max result so that it retrieves everything.
   */
  public List<ModelEntry> getModelEntries (Model md, ModelEntriesType type) throws SessionException {
    Query query = createQuery ("select m from ModelEntry as m where m.modelId =  :modelId and m.type = :type order by m.index asc");
    query.setLong ("modelId", md.getId ());
    query.setInteger ("type", type.ordinal ());

    @SuppressWarnings ("unchecked")
    List<ModelEntry> returnList = query.list ();
    return returnList;
  }

  public void saveModelEntries (Iterator<ModelEntry> modelEntries) throws SessionException {
    beginTransaction ();
    while (modelEntries.hasNext ()) {
      saveOrUpdateObject (modelEntries.next ());
    }
    commitTransaction ();
  }
}
