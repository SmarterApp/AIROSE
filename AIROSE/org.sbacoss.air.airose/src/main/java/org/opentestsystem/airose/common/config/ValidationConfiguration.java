/*******************************************************************************
 * Copyright (c) 2013 American Institutes for Research
 * 
 * This file is part of AIROSE.
 * 
 * AIROSE is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 * 
 * AIROSE is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with AIROSE.  If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/
package org.opentestsystem.airose.common.config;

import java.io.IOException;
import java.util.logging.Logger;

public class ValidationConfiguration extends AbstractConfiguration
{
  protected static final Logger          LOG                  = Logger.getLogger (ValidationConfiguration.class.getName ());

  private static ValidationConfiguration singleton;

  /*
   * message that will be shown when configuration has not been initialized
   * properly.
   */
  static String                          uninitializedMessage = null;
  static {
    StringBuffer bfr = new StringBuffer ();
    bfr.append ("Essay Scorer Validation configuration has not been initialized. First call initSingleton(<config>).");
    uninitializedMessage = bfr.toString ();
  }

  /*
   * No initialization is done in here. See the docs for
   * initSingleton(<configFilename>) however, for more information on
   * initialization.
   */
  protected static ValidationConfiguration getInstance () {
    return singleton;
  }

  /*
   * Initializes the configuration for the trainer. Needs to be invoked at the
   * very begining. Do not invoke this directly - call
   * ConfigurationFactory.initializeConfiguration instead.
   * 
   * @param configFilename Name of the configuration file which has
   * configuration properties.
   * 
   * @throws IOException if the file is not found.
   * 
   * @returns nothing.
   */
  protected static synchronized void initSingleton (String configFilename) throws IOException {
    if (singleton == null) {
      singleton = new ValidationConfiguration (configFilename);
    }
  }

  protected String getUnInitializedMessage () {
    return uninitializedMessage;
  }

  private ValidationConfiguration (String fileName) throws IOException {
    super (fileName);
  }
}
