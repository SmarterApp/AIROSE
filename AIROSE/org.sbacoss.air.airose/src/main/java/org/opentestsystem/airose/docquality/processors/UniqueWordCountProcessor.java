/*******************************************************************************
 * Copyright (c) 2013 American Institutes for Research
 * 
 * This file is part of AIROSE.
 * 
 * AIROSE is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 * 
 * AIROSE is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with AIROSE.  If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/
package org.opentestsystem.airose.docquality.processors;

import java.util.Hashtable;
import java.util.Iterator;

import org.opentestsystem.airose.common.abstractdocument.AbstractDocument;
import org.opentestsystem.airose.common.abstractdocument.AbstractToken;
import org.opentestsystem.airose.db.entities.DocumentQuality;
import org.opentestsystem.airose.docquality.EnumDocumentQualityAttributes;

public class UniqueWordCountProcessor extends AbstractDocumentQualityProcessor
{

  public UniqueWordCountProcessor (DocumentQuality docQuality) {
    super (docQuality);
  }

  // /!hack. just for the purpose of being invoked by
  // RatioOfUniqueWordsProcessor
  protected UniqueWordCountProcessor () {
    super (null);
  }

  /*
   * (non-Javadoc)
   * 
   * @see
   * org.air.essayscorer.docquality.processors.AbstractDocumentQualityProcessor
   * #assignQualityWeight
   * (org.air.essayscorer.common.abstractdocument.AbstractDocument)
   * 
   * returns a count of unique words/concepts in the document. we are not going
   * to make an assumption that the words/tokens/concepts are unique.
   */
  public double assignQualityWeight (AbstractDocument doc) {
    // todo: I think they are all unique at this point. So we do not need
    // this expensive logic and can just return doc.getListOfTokens().size();
    Iterator<AbstractToken> tokensInDoc = doc.getListOfConceptsIterator ();
    Hashtable<String, Double> uniqueTerms = new Hashtable<String, Double> ();
    while (tokensInDoc.hasNext ()) {
      AbstractToken token = tokensInDoc.next ();
      Double existingCount = uniqueTerms.get (token.getToken ());
      if (existingCount == null) {
        existingCount = (double) 1;
      } else {
        existingCount = existingCount + 1;
      }
      uniqueTerms.put (token.getToken (), existingCount);
    }
    /*
     * todo: we need to use concpets from TF/IDF
     */
    return uniqueTerms.keySet ().size ();
  }

  public EnumDocumentQualityAttributes getDocumentQualityAttributeType () {
    return EnumDocumentQualityAttributes.UNIQUE_WORD_NUMBERS;
  }
}
