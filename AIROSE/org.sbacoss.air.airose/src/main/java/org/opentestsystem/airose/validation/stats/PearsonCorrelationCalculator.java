/*******************************************************************************
 * Copyright (c) 2013 American Institutes for Research
 * 
 * This file is part of AIROSE.
 * 
 * AIROSE is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 * 
 * AIROSE is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with AIROSE.  If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/
package org.opentestsystem.airose.validation.stats;

import java.io.FileNotFoundException;
import java.io.PrintStream;
import java.util.List;

import org.opentestsystem.airose.common.abstractdocument.AbstractDocument;
import org.opentestsystem.airose.regression.AbstractDocumentStats;

/*
 * base on http://www.vias.org/tmdatanaleng/cc_corr_coeff.html
 */
public class PearsonCorrelationCalculator extends AbstractStatsProcessor
{

  public PearsonCorrelationCalculator (String outputFolder) {
    super (outputFolder);
  }

  private double mSumXiYi     = 0;
  private double mSumXi       = 0;
  private double mSumYi       = 0;
  private double mSumXiSquare = 0;
  private double mSumYiSquare = 0;

  int            totalItems   = 0;

  protected void processDocumentStat (AbstractDocumentStats stat) {
    if (stat == null)
      return;

    ++totalItems;
    AbstractDocument doc = stat.getDocument ();
    int newScoreRoundedToNearestInt = (int) (Math.round (stat.getNewScore ()));
    int oldScoreRoundedToNearestInt = (int) (Math.round (doc.getScore ()));

    mSumXi = mSumXi + newScoreRoundedToNearestInt;
    mSumYi = mSumYi + oldScoreRoundedToNearestInt;
    mSumXiSquare = mSumXiSquare + newScoreRoundedToNearestInt * newScoreRoundedToNearestInt;
    mSumYiSquare = mSumYiSquare + oldScoreRoundedToNearestInt * oldScoreRoundedToNearestInt;
    mSumXiYi = mSumXiYi + oldScoreRoundedToNearestInt * newScoreRoundedToNearestInt;
  }

  protected void preProcessDocumentStats (@SuppressWarnings ("rawtypes") List stats) {
    // nothing to do.
  }

  protected void postProcessDocumentStats (@SuppressWarnings ("rawtypes") List stats) throws FileNotFoundException {

    PrintStream prn = new PrintStream (getOutputFolder () + "/pearsonCorrelationCoefficient.txt");
    prn.println ("\n\n\n");
    prn.println ("=====================================================");

    double n = totalItems;

    double r = (mSumXiYi - mSumXi * mSumYi / n) / Math.sqrt ((mSumXiSquare - mSumXi * mSumXi / n) * (mSumYiSquare - mSumYi * mSumYi / n));

    prn.println ("Pearson's correlation coefficient, " + r);
    prn.println ("=====================================================");
    prn.close ();
  }
}
