/*******************************************************************************
 * Copyright (c) 2013 American Institutes for Research
 * 
 * This file is part of AIROSE.
 * 
 * AIROSE is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 * 
 * AIROSE is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with AIROSE.  If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/
package org.opentestsystem.airose.opennlp;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;

import opennlp.tools.cmdline.parser.ParserTool;
import opennlp.tools.parser.Parse;
import opennlp.tools.parser.Parser;
import opennlp.tools.parser.ParserFactory;
import opennlp.tools.parser.ParserModel;
import opennlp.tools.sentdetect.SentenceDetectorME;
import opennlp.tools.sentdetect.SentenceModel;

import org.apache.log4j.Logger;
import org.opentestsystem.airose.common.config.ConfigurationFactory;
import org.opentestsystem.airose.common.config.UninitializedException;
import org.opentestsystem.airose.common.config.ConfigurationFactory.ConfigurationType;
import org.opentestsystem.airose.utilities.LoggerUtil;

public class EssayScorerOpenNLP
{

  private Parser                    mParser           = null;
  private SentenceDetectorME        mSentenceDetector = null;

  protected static Logger           LOG               = Logger.getLogger (EssayScorerOpenNLP.class.getName ());

  private static EssayScorerOpenNLP singleton         = null;

  /*
   * Gets the parse trees corresponding to this sentence. There is a possibility
   * that OpenNLP parser is not thread-safe.
   * 
   * @param sentence The sentence for which parse trees need to be generated.
   * 
   * @Todo investigate.
   */
  public synchronized Parse[] getParses (String sentence) {
    Parse topParses[] = ParserTool.parseLine (sentence, mParser, 1);
    return topParses;
  }

  /*
   * Separates a single response into multiple sentences. This is a necessary
   * first step before parsing. Again, there is a possibility that ParseTool is
   * not thread-sage.
   * 
   * @param response The response for which parse trees need to be generated.
   * 
   * @Todo investigate.
   */
  public synchronized String[] getSentences (String response) {
    return mSentenceDetector.sentDetect (response);
  }

  /*
   * Gets (transparently initializes) an instance of EssayScorerOpenNLP object.
   * Needs either a TrainerConfiguration or a ScorerConfiguration to have been
   * initialized first.
   */
  public static EssayScorerOpenNLP getInstance () {
    if (singleton != null)
      return singleton;

    init ();

    return singleton;
  }

  private EssayScorerOpenNLP () throws IOException {
    initSentenceDetector ();
    initParser ();
  }

  /*
   * Initializes the sentence detector.
   */
  private void initSentenceDetector () throws IOException {
    InputStream modelIn = null;
    try {
      modelIn = new FileInputStream (getOpenNLPDataPath () + "/en-sent.bin");
      SentenceModel model = new SentenceModel (modelIn);
      mSentenceDetector = new SentenceDetectorME (model);
    } catch (Exception exp) {
      exp.printStackTrace ();
      LoggerUtil.severe (LOG, "Error initializing openNLP SentenceDetector. Message: %s", new Object[] { exp.getMessage () });
    } finally {
      if (modelIn != null) {
        modelIn.close ();
      }
    }
  }

  /*
   * Initializes a parser. This uses the sentence detector.
   */
  private void initParser () throws IOException {
    InputStream modelIn = null;
    try {
      modelIn = new FileInputStream (getOpenNLPDataPath () + "/en-parser-chunking.bin");
      ParserModel model = new ParserModel (modelIn);
      mParser = ParserFactory.create (model);
    } catch (Exception exp) {
      exp.printStackTrace ();
      LoggerUtil.severe (LOG, "Error initializing openNLP Parser. Message: %s", new Object[] { exp.getMessage () });
    } finally {
      if (modelIn != null) {
        modelIn.close ();
      }
    }
  }

  private String getOpenNLPDataPath () throws UninitializedException {
    return ConfigurationFactory.getConfiguration ().getOpenNLPDataPath ();
  }

  private synchronized static void init () {
    if (singleton != null)
      return;
    try {
      singleton = new EssayScorerOpenNLP ();
    } catch (IOException exp) {
      LoggerUtil.severe (LOG, "Error initializing openNLP Parser. Message: %s", new Object[] { exp.getMessage () });
    }
  }

  public static void main (String argv[]) {
    try {
      String configFileName = argv[0];
      ConfigurationFactory.initializeConfiguration (configFileName, ConfigurationType.TRAINER);
      EssayScorerOpenNLP scorerOpenNLP = EssayScorerOpenNLP.getInstance ();
      Parse[] tree = scorerOpenNLP.getParses ("I completely agree with those people who think computers have a negative effect on us today.");
      System.err.println ("Parse trees generated");
    } catch (IOException exp) {
      LoggerUtil.severe (LOG, exp.getMessage ());
      System.err.println (exp.getMessage ());
    }
  }
}
