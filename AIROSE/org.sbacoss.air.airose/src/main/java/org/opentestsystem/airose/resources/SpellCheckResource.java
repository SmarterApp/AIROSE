/*******************************************************************************
 * Copyright (c) 2013 American Institutes for Research
 * 
 * This file is part of AIROSE.
 * 
 * AIROSE is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 * 
 * AIROSE is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with AIROSE.  If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/
package org.opentestsystem.airose.resources;

import java.util.HashSet;
import java.util.List;

import org.opentestsystem.airose.common.abstractdocument.AbstractResource;
import org.opentestsystem.airose.common.abstractdocument.ReadOnlyResourceException;
import org.opentestsystem.airose.db.accessors.PreviouslySeenWordsAccessor;
import org.opentestsystem.airose.db.entities.Model;
import org.opentestsystem.airose.db.session.SessionException;

public class SpellCheckResource extends AbstractResource
{
  private HashSet<String> mPreviouslyEncounteredWords = new HashSet<String> ();

  public SpellCheckResource () {
  }

  public void addAll (SpellCheckResource resource) {
    mPreviouslyEncounteredWords.addAll (resource.mPreviouslyEncounteredWords);
  }

  // add to the list of previously seen words. ideally only correctly
  // spelled words, or words in the prompt or proper nouns should be added here.
  public void addToPreviouslyEncounteredWords (String word) throws ReadOnlyResourceException {
    if (getReadOnly ())
      throw new ReadOnlyResourceException ("This particular instance of SpellCheckResource is in readonly state.");
    if (mPreviouslyEncounteredWords.contains (word))
      return;
    mPreviouslyEncounteredWords.add (word);
  }

  public void initializeFromDB (PreviouslySeenWordsAccessor dbAccessor, Model md) throws SessionException {
    setReadOnly (true);
    List<String> listOfStrings = dbAccessor.getPreviouslySeenWords (md);
    for (String st : listOfStrings)
      mPreviouslyEncounteredWords.add (st);
  }

  public void saveToDB (PreviouslySeenWordsAccessor dbAccessor, Model md) throws SessionException {
    dbAccessor.saveToDB (md, mPreviouslyEncounteredWords.iterator ());
  }

  /*
   * suggestedWords are possible spell check suggestions for candidateWord. the
   * algorithm here will return any word from suggestedWords that already
   * appears in the internal list. if no word from suggestedWords is found in
   * the internal list then the algorithm will return the first suggested word.
   * it is assumed that the spell checker has returned words in descending order
   * of weight.
   * 
   * todo: we are not looking at candidate word right now as we have only stored
   * the list of terms in DB. in the future we should keep track of what word
   * was spell checked to what. this will help in manually fixing the wordlist
   * and improving the spell checker.
   */
  public String getTheWordFromListPreviouslySeen (List<String> suggestedWords, String candidateWord) {
    if (suggestedWords == null || suggestedWords.size () == 0)
      return null;
    for (String suggestedWord : suggestedWords) {
      if (mPreviouslyEncounteredWords.contains (suggestedWord))
        return suggestedWord;
    }
    return suggestedWords.get (0);
  }

}
