/*******************************************************************************
 * Copyright (c) 2013 American Institutes for Research
 * 
 * This file is part of AIROSE.
 * 
 * AIROSE is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 * 
 * AIROSE is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with AIROSE.  If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/
package org.opentestsystem.airose.sspace;

import java.util.Collections;
import java.util.Set;
import java.util.List;
import java.util.Iterator;

import org.opentestsystem.airose.db.entities.TermIndex;

import edu.ucla.sspace.basis.BasisMapping;
import edu.ucla.sspace.basis.StringBasisMapping;

/*
 * Once we have run LSA on a matrix and reduced its dimension, the new reduced
 * dimension matrix
 */
public class TermDimensionMap
{
  /**
   * A mapping from a word to the row index in the that word-document matrix
   * that contains occurrence counts for that word.
   */
  protected BasisMapping<String, String> mTermToIndex;

  /*
   * creates a brand new term-to-dimension map. the term-to-dimension map is not
   * readonly. it may be changed by calling setReadOnly.
   */
  public TermDimensionMap () {
    mTermToIndex = new StringBasisMapping ();
    setReadOnly (false);
  }

  /*
   * build the term-to-dimension map. required for scoring / validation. the
   * list should be sorted in ascending order of dimension. the
   * term-to-dimension map is readonly. it may be changed by calling
   * setReadOnly.
   * 
   * todo: what happens if the dimensions are not continugous?
   */
  public TermDimensionMap (List<TermIndex> listOfTerms) {
    mTermToIndex = new StringBasisMapping ();
    Iterator<TermIndex> iterator = listOfTerms.iterator ();
    while (iterator.hasNext ()) {
      TermIndex ti = iterator.next ();
      mTermToIndex.getDimension (ti.getTerm ());
    }
    setReadOnly (true);
  }

  public boolean isReadOnly () {
    return mTermToIndex.isReadOnly ();
  }

  public void setReadOnly (boolean readOnly) {
    mTermToIndex.setReadOnly (readOnly);
  }

  public int getDimension (String token) {
    return mTermToIndex.getDimension (token);
  }

  public int getNumberOfDimensions () {
    // Get the total number of terms
    // encountered so far, including any new
    // unique terms found in the most recent
    // document
    return mTermToIndex.numDimensions ();
  }

  public Set<String> getWords () {
    return Collections.unmodifiableSet (mTermToIndex.keySet ());
  }

}
