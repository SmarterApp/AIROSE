/*******************************************************************************
 * Copyright (c) 2013 American Institutes for Research
 * 
 * This file is part of AIROSE.
 * 
 * AIROSE is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 * 
 * AIROSE is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with AIROSE.  If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/
package org.opentestsystem.airose.languagetool;

import java.io.IOException;
import java.util.Hashtable;
import java.util.List;

import org.languagetool.JLanguageTool;
import org.languagetool.rules.RuleMatch;
import org.opentestsystem.airose.common.config.UninitializedException;

public class LanguageTool
{
  /*
   * store all the language tools for the various languages.
   */
  private static Hashtable<LanguageEnum, LanguageTool> LanguageTools      = new Hashtable<LanguageEnum, LanguageTool> ();

  private JLanguageTool                                mLanguageProcessor = null;

  public Mistakes check (String sentence) throws IOException {
    List<RuleMatch> matches = getLanguageToolRuleMatches (sentence);
    return new Mistakes (RuleMatchFactory.createListOfMistakes (sentence, matches));
  }

  public static LanguageTool getInstanceForDefaultLanguage () throws UninitializedException {
    return getInstance (LanguageEnum.AMERICAN_ENGLISH);
  }

  public static LanguageTool getInstance (LanguageEnum language) throws UninitializedException {
    if (!LanguageTools.containsKey (language)) {
      synchronized (LanguageTools) {
        if (!LanguageTools.containsKey (language)) {
          LanguageTool languageTool = new LanguageTool (language);
          LanguageTools.put (language, languageTool);
        }
      }
    }
    return LanguageTools.get (language);
  }

  private List<RuleMatch> getLanguageToolRuleMatches (String sentence) throws IOException {
    return mLanguageProcessor.check (sentence);
  }

  private LanguageTool (LanguageEnum language) throws UninitializedException {
    init (language);
  }

  private void init (LanguageEnum language) throws UninitializedException {
    try {
      mLanguageProcessor = new JLanguageTool (language.getLanguage ());
      mLanguageProcessor.activateDefaultPatternRules ();
    } catch (IOException exp) {
      throw new UninitializedException ("Problem initialize language tool for spell check and grammar check :" + exp.toString ());
    }
  }

  public static void main (String argv[]) {
    try {
      final String sentence = "Lwng time ago people hunted swans.";
      LanguageTool processor = LanguageTool.getInstanceForDefaultLanguage ();

      Mistakes mistakes = processor.check (sentence);
      for (Mistake mistake : mistakes.getListOfMistakes ())
        System.err.println (mistake.toString ());

    } catch (Exception exp) {
      exp.printStackTrace ();
    }
  }

}
