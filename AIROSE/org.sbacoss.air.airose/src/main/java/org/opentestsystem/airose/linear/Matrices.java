/*******************************************************************************
 * Copyright (c) 2013 American Institutes for Research
 * 
 * This file is part of AIROSE.
 * 
 * AIROSE is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 * 
 * AIROSE is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with AIROSE.  If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/
package org.opentestsystem.airose.linear;

import org.apache.commons.math3.linear.BlockRealMatrix;
import org.apache.commons.math3.linear.DiagonalMatrix;
import org.apache.commons.math3.linear.RealMatrix;

public class Matrices
{

  public static Matrix createDiagonalMatrix (int columns) {
    return create (columns, columns, MatrixTypeEnum.DIAGONAL);
  }

  public static Matrix create (int rows, int columns, MatrixTypeEnum type) {
    if (MatrixTypeEnum.DIAGONAL == type) {
      if (rows != columns)
        throw new MatrixCreationException ("Rows != Columns. A diagonal matrix cannot be created.");
      return new Matrix (new DiagonalMatrix (rows));
    } else {
      return new Matrix (new BlockRealMatrix (rows, columns));
    }

  }

  public static void copyTo (Matrix matrix, Matrix output) {
    RealMatrix source = matrix._matrix;
    RealMatrix destination = output._matrix;
    for (int row = 0; row < source.getRowDimension (); ++row) {
      for (int column = 0; column < source.getColumnDimension (); ++column) {
        destination.setEntry (row, column, source.getEntry (row, column));
      }
    }
  }

  public static Matrix multiply (Matrix m1, Matrix m2) {
    return m1.multiply (m2);
  }

  public static Matrix transpose (Matrix matrix) {
    return matrix.transpose (matrix);
  }
}
