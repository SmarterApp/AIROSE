/*******************************************************************************
 * Copyright (c) 2013 American Institutes for Research
 * 
 * This file is part of AIROSE.
 * 
 * AIROSE is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 * 
 * AIROSE is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with AIROSE.  If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/
package org.opentestsystem.airose.common.config;

import java.io.IOException;

public class ConfigurationFactory
{

  public static enum ConfigurationType {
    TRAINER, SCORER, VALIDATION
  };

  private static AbstractConfiguration configuration     = null;
  private static ConfigurationType     configurationType = null;

  /*
   * @return the configuration type of this run.
   */
  public static ConfigurationType getConfigurationType () {
    return configurationType;
  }

  /*
   * @return get the configurations object
   */
  public static AbstractConfiguration getConfiguration () {
    return configuration;
  }

  /*
   * This method needs to be called once in the begining of the run to
   * initialize configuration from a file.
   * 
   * @param filePath the path of the configuration file.
   * 
   * @param type enum value of ConfigurationType
   * 
   * @return nothing.
   */
  public static void initializeConfiguration (String filePath, ConfigurationType type) throws IOException {
    configurationType = type;
    if (type == ConfigurationType.TRAINER) {
      TrainerConfiguration.initSingleton (filePath);
      configuration = TrainerConfiguration.getInstance ();
    } else if (type == ConfigurationType.SCORER) {
      ScorerConfiguration.initSingleton (filePath);
      configuration = ScorerConfiguration.getInstance ();
    } else if (type == ConfigurationType.VALIDATION) {
      ValidationConfiguration.initSingleton (filePath);
      configuration = ValidationConfiguration.getInstance ();
    }
  }
}
