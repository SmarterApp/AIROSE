/*******************************************************************************
 * Copyright (c) 2013 American Institutes for Research
 * 
 * This file is part of AIROSE.
 * 
 * AIROSE is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 * 
 * AIROSE is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with AIROSE.  If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/
package org.opentestsystem.airose.db.accessors;

import org.hibernate.Query;
import org.opentestsystem.airose.db.entities.MatrixEntry;
import org.opentestsystem.airose.db.entities.MatrixInfo;
import org.opentestsystem.airose.db.entities.MatrixLoadException;
import org.opentestsystem.airose.db.entities.MatrixType;
import org.opentestsystem.airose.db.entities.Model;
import org.opentestsystem.airose.db.session.DBSession;
import org.opentestsystem.airose.db.session.SessionException;
import org.opentestsystem.airose.linear.*;


import java.util.List;

public class MatrixAccessor extends AbstractAccessor
{

  public MatrixAccessor (DBSession session) {
    super (session);
  }

  public Matrix getMatrixEntries (Model md, MatrixType mt) throws SessionException, MatrixLoadException {
    Query query = createQuery ("select m from MatrixInfo as m where m.modelId =  :modelId and m.matrixType = :type");
    query.setLong ("modelId", md.getId ());
    query.setString ("type", mt.name ());

    MatrixInfo matrixInfo = (MatrixInfo) query.uniqueResult ();
    if (matrixInfo == null) {
      throw new MatrixLoadException (String.format ("Exception loading matrix for model id %d. No matrix found.", md.getModelId ()));
    }

    // now get all the entries for this matrix.
    query = createQuery ("select m from MatrixEntry as m where m.matrixId = :foreignKey");
    query.setLong ("foreignKey", matrixInfo.getId ());
    @SuppressWarnings ("unchecked")
    List<MatrixEntry> listOfElements = query.list ();

    return createMatrix (matrixInfo, listOfElements);

  }

  /*
   * Saves a matrix to db. todo: set up foreign keys.
   */
  public void saveMatrix (Matrix m, MatrixType matrixType, Model md) throws SessionException {
    if (m.getMatrixType () == MatrixTypeEnum.DIAGONAL)
      saveDiagonalMatrix (m, matrixType, md);
    else
      /*
       * todo: there are other types of matrices. we need to be able to have
       * separate save routines for them.
       */
      saveRegularMatrix (m, matrixType, md);
  }

  private void saveRegularMatrix (Matrix m, MatrixType mt, Model md) throws SessionException {
    beginTransaction ();
    MatrixInfo matrixInfo = saveMatrixMetaInformation (md, m.rows (), m.columns (), mt);
    for (int row = 0; row < m.rows (); ++row) {
      for (int col = 0; col < m.columns (); ++col) {
        double value = m.get (row, col);
        saveData (row, col, value, matrixInfo.getId ());
      }
    }
    commitTransaction ();
  }

  private void saveDiagonalMatrix (Matrix m, MatrixType mt, Model md) throws SessionException {
    if (m.getMatrixType () != MatrixTypeEnum.DIAGONAL)
      throw new MatrixSaveException ("Matrix is not of type DIAGONAL.");
    beginTransaction ();
    MatrixInfo matrixInfo = saveMatrixMetaInformation (md, m.rows (), m.rows (), mt);
    for (int counter = 0; counter < m.rows (); ++counter) {
      double value = m.get (counter, counter);
      saveData (counter, counter, value, matrixInfo.getId ());
    }
    commitTransaction ();
  }

  private MatrixInfo saveMatrixMetaInformation (Model md, int rows, int columns, MatrixType mt) throws SessionException {
    MatrixInfo toDBM = new MatrixInfo (md.getId (), rows, columns, mt);
    return (MatrixInfo) saveOrUpdateObject (toDBM);
  }

  private void saveData (int row, int column, double value, long matrixForeignKey) throws SessionException {
    MatrixEntry toDBM = new MatrixEntry (row, column, value, matrixForeignKey);
    saveOrUpdateObject (toDBM);
  }

  private Matrix createMatrix (MatrixInfo matrixInfo, List<MatrixEntry> listOfEntries) throws MatrixLoadException {

    Matrix newMatrix = null;
    MatrixType matrixType = MatrixType.valueOf (matrixInfo.getMatrixType ());
    if (matrixType == MatrixType.Matrix_S) {
      if (listOfEntries.size () != matrixInfo.getNumberOfRows ())
        throw new MatrixLoadException (String.format (
            "Exception loading matrix id %d. Matrix has been declared to be of type diagonal but the number of entries do not satisfy the requirement of diagonal matrix. Expected %d. Found %d",
            matrixInfo.getId (), matrixInfo.getNumberOfRows (), listOfEntries.size ()));
      newMatrix = Matrices.create (matrixInfo.getNumberOfRows (), matrixInfo.getNumberOfColumns (), MatrixTypeEnum.DIAGONAL);
    } else if (matrixType == MatrixType.Matrix_U || matrixType == MatrixType.Matrix_V) {
      if (listOfEntries.size () != matrixInfo.getNumberOfRows () * matrixInfo.getNumberOfColumns ())
        throw new MatrixLoadException (String.format ("Exception loading matrix id %d. The number of entries do not satisfy the requirements for this matrix. Expected %d. Found %d",
            matrixInfo.getId (), matrixInfo.getNumberOfRows () * matrixInfo.getNumberOfColumns (), listOfEntries.size ()));
      newMatrix = Matrices.create (matrixInfo.getNumberOfRows (), matrixInfo.getNumberOfColumns (), MatrixTypeEnum.REAL2D);
    }

    if (newMatrix != null) {
      for (MatrixEntry entry : listOfEntries) {
        newMatrix.set (entry.getRowNumber (), entry.getColumnNumber (), entry.getEntry ());
      }
    }

    return newMatrix;
  }

}
