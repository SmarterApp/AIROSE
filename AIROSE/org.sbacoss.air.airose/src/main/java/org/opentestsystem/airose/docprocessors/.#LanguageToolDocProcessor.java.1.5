package org.air.essayscorer.docprocessors;

import java.util.HashMap;
import java.util.List;
import org.air.essayscorer.common.abstractdocument.AbstractDocProcessors;
import org.air.essayscorer.common.abstractdocument.AbstractDocument;
import org.air.essayscorer.common.abstractdocument.AbstractResource;
import org.air.essayscorer.common.abstractdocument.DocProcessorException;
import org.air.essayscorer.languagetool.LanguageTool;
import org.air.essayscorer.languagetool.Mistake;
import org.air.essayscorer.languagetool.Mistakes;
import org.air.essayscorer.languagetool.RuleMatchTypeEnum;
import org.air.essayscorer.resources.SpellCheckResource;

public class LanguageToolDocProcessor extends AbstractDocProcessors {

	public LanguageToolDocProcessor(AbstractDocument doc) {
		super(doc);
	}

	public boolean processDocument(HashMap<String, AbstractResource> resourceMap)
			throws DocProcessorException {

		SpellCheckResource resource = (SpellCheckResource) resourceMap
				.get(SpellCheckResource.class.getName());

		try {
			AbstractDocument doc = getDocument();
			String response = doc.getModifiedResponse();
			LanguageTool languageTool = LanguageTool
					.getInstanceForDefaultLanguage();
			Mistakes mistakes = languageTool.check(response);

			// we will now modify the response to fix misspellings.
			int startStringIndex = 0;
			StringBuilder builder = new StringBuilder("");
			for (int counter1 = 0; counter1 < mistakes.getListOfMistakes()
					.size(); ++counter1) {
				Mistake mistake = mistakes.getListOfMistakes().get(counter1);
				if (mistake.getMistakeType() == RuleMatchTypeEnum.SPELLING_MISTAKE) {
					if (startStringIndex != mistake.getStartOfContext()) {
						// append everything from startStringIndex to the start
						// position of this mistake.
						builder.append(response.substring(startStringIndex,
								mistake.getStartOfContext()) + " ");
					}

					// do spell check.
					String replacementString = resource
							.getTheWordFromListPreviouslySeen(
									mistake.getAllSuggestedReplacements(),
									mistake.getMistakeWord());
					if (replacementString == null) {
						// we have not seen this word before. We will replace it
						// with the first suggestion.
						replacementString = mistake.getMistakeWord();
					}

					builder.append(replacementString + " ");
					// move pointer.
					startStringIndex = mistake.getEndOFContext() + 1;
				}
			}

			if (startStringIndex < response.length() - 1)
				builder.append(response.substring(startStringIndex));

			// update the resposne that we will be processing further.
			doc.setModifiedResponse(builder.toString());
			// add a tracker for all the spelling mistakes that were found.
			doc.setListOfMistakes(mistakes);
		} catch (Exception exp) {
			throw new DocProcessorException(exp);
		}
		return true;
	}
}
