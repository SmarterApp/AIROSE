/*******************************************************************************
 * Copyright (c) 2013 American Institutes for Research
 * 
 * This file is part of AIROSE.
 * 
 * AIROSE is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 * 
 * AIROSE is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with AIROSE.  If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/
package org.opentestsystem.airose.languagetool;

import java.util.ArrayList;
import java.util.List;

import org.languagetool.rules.RuleMatch;
import org.opentestsystem.airose.utilities.StringUtils;

public abstract class Mistake
{
  /*
   * mContext is the word / substring with which we found a problem
   */
  protected String  mContext             = null;
  private RuleMatch mRuleMatch           = null;

  protected Mistake (RuleMatch m, String context) {
    this.mRuleMatch = m;
    mContext = context.substring (m.getFromPos (), m.getToPos ());
  }

  protected Mistake () {
  };

  public String getMistakeWord () {
    return mContext;
  }

  public List<String> getAllSuggestedReplacements () {
    if (mRuleMatch == null)
      return new ArrayList<String> ();
    else
      return this.mRuleMatch.getSuggestedReplacements ();
  }

  public String getFirstSuggestedReplacement () {
    List<String> allSuggestedReplacements = getAllSuggestedReplacements ();
    if (allSuggestedReplacements.size () > 0)
      return allSuggestedReplacements.get (0);
    return null;
  }

  public abstract RuleMatchTypeEnum getMistakeType ();

  public abstract boolean isMyTypeMistake (RuleMatch match);

  public abstract Mistake createNewInstance (RuleMatch m, String context);

  public String toString () {
    return String.format ("Context: %s ; Suggested Replacements : %s; Mistake Type: %s ; Mistake Subtype: %s", mContext, getAllSuggestedReplacements ().toString (), getMistakeType ().toString (),
        getMistakeTypeSubCategory ());
  }

  public int getStartOfContext () {
    return mRuleMatch.getFromPos ();
  }

  public int getEndOFContext () {
    return mRuleMatch.getToPos ();
  }

  protected RuleMatch getRuleMatch () {
    return this.mRuleMatch;
  }

  public String getMistakeTypeSubCategory () {
    return this.mRuleMatch.getRule ().getCategory ().getName ();
  }

  public String getUniqueMistakeId () {
    return StringUtils.format ("{0}-{1}", getMistakeType ().toString (), getMistakeTypeSubCategory ());
  }
}
